==========================
gitlab-runner basic usages
==========================

gitlab-runner installation
--------------------------
todo


3 kinds of gitlab-runners
-------------------------
1) shared runners
2) group runners
3) project runners
https://docs.gitlab.com/ee/ci/runners/runners_scope.html#create-a-group-runner-with-a-runner-authentication-token


using docker command inside .gitlab-ci.yml: gitlab-runner with shell executor
-----------------------------------------------------------------------------
1 install gitlab-runner

2 register runner to the project (only owner of the group can view/tag the runners, pass tokens to runner)
  $ sudo gitlab-runner register (interactively register a runner)
  descriptions: shell executor runner
  url: https://gitlabe1.ext.net.nokia.com/
  tag: shell-generic
  token: can be found at gitlab GUI page: 'projectdir -> settings -> ci/cd -> runners -> specific runner' or 'project group runners'

3 check the available runners configured for project/group in:
  inside project/group -> settings -> ci/cd -> runners -> expand  

4 add sensitive data as env variables inside gitlab project page
  inside project -> settings -> ci/cd -> variables -> expand
  check the variable state: protected(x), masked(x).
  
  about the protected & masked:
  protected: only exposed to protected branches or tags. will not exposed branch/tag without protection.
             one might need to protect it by going to settings > repository > protected branch.
  masked: hidden in job logs. must match masking requirements.

  DOCKER_AUTH_CONFIG:
  $ docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD  # after login, will create a auth key in $HOME
  # copy the following config.json to another machine, will allow direct access to the same docker account
  ```~/.docker/config.json
  {
  	"auths": {
  		"rebornlinux-docker-local.artifactory-blr1.int.net.nokia.com": {
  			"auth": "bWV0dW5nOkpiM3I9ZWZh"
  		}
  	}
  }
  ```

5 config docker daemon on the server that running gitlab-runner (the self-maintained docker registry)
  ```/etc/docker/daemon.json
  {
    incecure-registries": [ "http://135.251.200.81:1024" ],
      "debug" : true,
      "data-root":"/repo1/docker_root",
      "registry-mirrors": [
             "https://docker-registry-remote.artifactory-espoo1.int.net.nokia.com",
             "https://docker-registry-remote.artifactory-espoo2.int.net.nokia.com",
             "https://registry.docker-cn.com"
     ]
  }
  ```

6 edit .gitlab-ci.yml like:
  ```.gitlab-ci.yml
  stages:
    - release
  
  release:
    stage: release
    rules:                                                                    # only trigger stage when changes on gitlab-ci
      - changes:
        - .gitlab-ci.yml
    before_script:
      - mkdir -p $HOME/.docker                                                # setup config.json for non-interactive docker login
      - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json                  # for docker login without with user/passwd 
      # - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD  # login with user/passwd (env variable set in gitlab ci/cd)
      - docker info                                                           # test docker cmd
    script:
      - make toolchain
    tags:
      - shell-generic                                                         # assign the tag of runner for jobs to launch
  ```

------------------------------------------------------------------------------
using docker command inside .gitlab-ci.yml: gitlab-runner with docker executor
------------------------------------------------------------------------------
A the dind method
-----------------
1 install gitlab-runner

2 register runner to the project
  $ sudo gitlab-runner register -n                                            # (non-interactively register a runner)
  --url https://gitlabe1.ext.net.nokia.com/
  --tag docker-generic
  --executor docker
  --description "docker executor runner"
  --docker-image "docker:20.10"
  --registration-token $GITLAB_REGISTRATION_TOKEN
  --docker-privileged                                                         # need privileged mode to enable dind access the host /var/run/docker.sock

3 inside .gitlab-ci.yml for ci/cd pipeline
  ```
  services:                                                                   # use dind as a service (a link to runner's job docker image)
    - docker:dind
  
  docker_build:
    stage: build
    image: docker:latest
    script:
      - docker build -t example-image:latest .                                # use docker cmd in jobs
  ```

4 drawbacks of dind & solutions
  the major drawback is dind leading to more complicated caching behavior when a series of jobs need to be done:
  docker-job1 -> docker-job2 -> docker-job3 ...
  each runner job gets a new env where previously built layers won't be accessible.
  
  a remedy for this: pull the previous version of your image before starting current runner job:
  use the --cache-from build flag to make the pulled image's layers available as a cache source:
  ```
  docker_build:
    stage: build
    image: docker:latest
    script:
      - docker pull $CI_REGISTRY_IMAGE:latest || true                                       # get the image of previous job
      - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest .  # make the pulled image as a cache source
  ```

B the /var/run/docker.sock mount method
---------------------------------------
1 install gitlab-runner

2 regist gitlab-runner by:
  $ sudo gitlab-runner register -n                                                          # (non-interactively register a runner)
  --url https://gitlabe1.ext.net.nokia.com/
  --tag docker-generic
  --executor docker
  --description "docker executor runner"
  --docker-image "docker:20.10"                                                             # or alpine:latest
  --registration-token $GITLAB_REGISTRATION_TOKEN
  --docker-volumes /var/run/docker.sock:/var/run/docker.sock                                # mount the host docker sock into new container 

3 advantages
  while this approach can lead to higher performance, less configuration, and none of the limitations of dind.

4 limitations
  malicious jobs might run cmds to make damage to gitlab-runner env:
  $ docker run -it malicious_image:latest
  $ docker rm -f $(docker ps -a)
  the ci/cd jobs might fail if two cocurrent jobs try to startup with the same container name


---------------------------
how to remove gitlab-runner
---------------------------
A UI methods
------------
# inside project page -> settings -> ci/cd -> runner -> remove runner
# check the existence of runner by:
  $(runner host) sudo gitlab-runner list
  docker-godevsig       Executor=docker Token=2X3MG... URL=https://gitlabe1.ext.net.nokia.com/
  docker-rebornlinux    Executor=docker Token=-QgVm... URL=https://gitlabe1.ext.net.nokia.com/
  shell runner          Executor=shell Token=zygsM7... URL=https://gitlabe1.ext.net.nokia.com/
  cloud-server-1        Executor=docker Token=T2xCi... URL=https://gitlabe1.ext.net.nokia.com/   # already deleted on UI but still exist

# also can verify each runner by:
  $(runner hsot) sudo gitlab-runner verify
    Runtime platform                                    arch=amd64 os=linux pid=4159 revision=4e1f20da version=13.4.0
    Running in system-mode.

    Verifying runner... is alive                        runner=2X3MGcwM
    Verifying runner... is alive                        runner=-QgVmNDK
    Verifying runner... is alive                        runner=zygsM7-R
    ERROR: Verifying runner... is removed               runner=T2xCivsX     # the remoted runner status is not right
    FATAL: Failed to verify runners

# del the configs inside /etc/gitlab-runner/config.toml
  $(runner host) sudo vim /etc/gitlab-runner/config.toml
  [[runners]]
    name = "cloud-server-1"
    url = "https://gitlabe1.ext.net.nokia.com/"
    token = "T2xC..."
    executor = "docker"
    [runners.custom_build_dir]
    [runners.cache]
      [runners.cache.s3]
      [runners.cache.gcs]
      [runners.cache.azure]
    [runners.docker]
      tls_verify = false
      image = "alpine:latest"
      privileged = true
      disable_entrypoint_overwrite = false
      oom_kill_disable = false
      disable_cache = false
      volumes = ["/apk/staging:/home/reborn/packages:rw", "/cache"]
      shm_size = 0

# check the list again -> the obsolete runner is gone
  $(runner host) sudo gitlab-runner list
  docker-godevsig       Executor=docker Token=2X3MG... URL=https://gitlabe1.ext.net.nokia.com/
  docker-rebornlinux    Executor=docker Token=-QgVm... URL=https://gitlabe1.ext.net.nokia.com/
  shell runner          Executor=shell Token=zygsM7... URL=https://gitlabe1.ext.net.nokia.com/

# or use cmd to delete unused runners (instead of operate gitlab-runner/config.toml)
  $(runner host) sudo gitlab-runner verify --delete

B cmdline method
----------------
# unregister gitlab runner using url and runner's token
  $(runner host) sudo gitlab-runner unregister --url https://gitlabe1.ext.net.nokia.com/ --token Zy2qJRMJ3sQd2BzH3LhD
  Runtime platform                                    arch=amd64 os=linux pid=18429 revision=4e1f20da version=13.4.0
  Running in system-mode.

  Unregistering runner from GitLab succeeded          runner=Zy2qJRMJ
  Updated /etc/gitlab-runner/config.toml

# the runner's token could be found in both '/etc/gitlab-runner/config.toml' or using 'sudo gitlab-runner list' output

# inside the web UI of gitlab project -> settings -> ci/cd -> runners (the web will automatically updated)


reference
---------
https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#enable-docker-commands-in-your-cicd-jobs
https://www.howtogeek.com/devops/how-to-build-docker-images-in-a-gitlab-ci-pipeline/
