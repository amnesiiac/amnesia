#include <vector>
#include <string>
#include <map>

struct MenuItem{
    std::string name;
    std::vector<MenuItem> submenu;
};

// load data into menu data structure => todo: move the data structure to a standalone file
MenuItem* initdata(){
    // create the menu structure
    MenuItem *menu_ptr = new MenuItem;
    menu_ptr->name = "Main Menu";
    menu_ptr->submenu = {
        {"downloader +", {{"curl +", {{""}}}}},
        {"ls series +", {{"ls +", {{"show list of file/dir in human readble format (newest modified the first)#ls -lht#"},
                                   {"show list of file/dir in human readble format (oldest modified the first)#ls -lhtr#"},
                                   {"show list of file/dir in a table format#ls | column -c ${num_item_each_row}#"},
                                   {"check whether a dir is empty or not (if-else in oneline)#[ $(ls -A ${dir} | wc -l) -eq 0 ] && echo 'empty' || echo 'not empty'#"}}},
                         {"lsof +", {{"show manual#man lsof#"},
                                     {"show network files in all addr (use portnum not portname)#sudo lsof -i -P#"}}},
                         {"lsns +", {{"show manual for format system namespace output#man lsns#"},
                                     {"list system namespaces#lsns -l#"}}}}},
        {"vim +", {{"nvim img +", {{"edit nvim dockerfile#nvim /Users/mac/nvim/Dockerfile#"},
                                   {"build nvim image##"},
                                   {"invoke nvim image by script##"}}},
                   {"vim cmd +", {{"create & edit a new copy of current file: new.log#:sav new.log#"},
                                  {"create a new file using a range of lines#:{linestart},${lineend}w ${out.file}#"}}},
                   {"regex match +", {{"search instance match pattern (start with lib, arbitary char in middle, end with tar.gz)#:g/lib.*tar.gz#"},
                                      {"search instance match pattern in line range#/\%>9l\%<33llib.*tar.gz#"},
                                      {"search instance match pattern in line range (press no to navi)#:10,32s/lib.*tar.gz//gc#"},
                                      {"match lines does not contain the word foo#/^\(\(.*foo.*\)\@!.\)*$#"},
                                      {"match lines does not contain certain pattern#/^\(\(.*lib.*tar.gz.*\)\@!.\)*$#"},
                                      {"show lines does not contain certain pattern#:g!/lib.*tar.gz/p#"},
                                      {"show lines ccontain certain pattern#:g/lib.*tar.gz/p#"},
                                      {"delete all lines match pattern#:g/lib.*tar.gz/d#"},
                                      {"delete all lines does not match pattern#:g!/lib.*tar.gz/d#"}}}}},
        {"kill proc +", {{"kill +"},
                         {"pkill +", {{"kill all processes with name exactly match the pattern#pkill -f ${pattern}#"}}}}},
        {"data serialization +", {{"json +"},
                                  {"yaml +", {{"*multiline string in yaml##yaml"}}}}},
    };
    return menu_ptr;
}
