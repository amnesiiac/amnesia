#include <vector>
#include <string>
#include <map>

struct MenuItem{
    std::string name;
    std::vector<MenuItem> submenu;
};

// load data into menu data structure => todo: move the data structure to a standalone file
MenuItem* initdata(){
    // create the menu structure
    MenuItem *menu_ptr = new MenuItem;
    menu_ptr->name = "Main Menu";
    menu_ptr->submenu = {
        {"mac +", {{"system integrity protection(SIP) +", {{"check SIP status#csrutil status#test"},
                                                           {"enable SIP#csrutil enable#"},
                                                           {"disable SIP#csrutil disable#"}}},
                   {"desktop icon +", {{"show icon#defaults delete com.apple.finder CreateDesktop; killall Finder#"},
                                       {"hide icon#defaults write com.apple.finder CreateDesktop -bool FALSE; killall Finder#"}}},
                   {"software install permission +", {{"disable install from all source#sudo spctl --master-disable#"},
                                                      {"enable install from all source#sudo spctl --master-enable#"}}},
                   {"show mac battery capacity#ioreg -rn AppleSmartBattery | grep -i capacity#"},
                   {"build mac app by applescript#osacompile -o ${appname.app} ${applescript.scpt}#"}}},
        {"transhell#docker run --rm -it transhell -shell#"},
        {"blog +", {{"twistefatezzz +", {{"edit twistfatezzz blog#cd ~/twistfatezz.github.io"},
                                         {"start twistfatezzz jekyll server#jekyll serve"}}},
                    {"melon +", {{"edit melon blog dockerfile#nvim /User/mac/paper/Dockerfile#"},
                                 {"edit melon blog#nvim /Users/mac/paper/blog/#"},
                                 {"start melon jekyll server#docker run -it --rm -p 4000:4000 -w=/paper -v /Users/mac/paper/blog/:/paper -h melon blog bundle exec jekyll serve --host 0.0.0.0#"}}}}},
        {"latex +", {{"build texlive pdflatex en#docker run --rm -i -v $PWD:/data latex pdflatex ${en}.tex#"},
                     {"build texlive xelatex zh#docker run --rm -i -v $PWD:/data latex xelatex ${zh}.tex#"}}},
        {"gnu cmd +", {{"gnu tools manuals#https://www.gnu.org/manual/#"},
                   {"sed +", {{"get content within line range of [start,end] from file#sed -n '${start},${end}p' ${file}#"},
                              {"get content within line range of [start,start+incr] from file#sed -n '${start},+${incr}p' ${file}#"},
                              {"delete lines from file +", {{"delete lines with matched pattern in place (some chars need to be escaped)#sed -i '/${pattern}/d' ${file}#"},
                                                            {"delete line by lineno in place (lineno count start from 1)#sed -i '${lineno}d' ${file}#"},
                                                            {"delete a range of line [start,end] in place (lineno count start from 1)#sed -i '${start},${end}d' ${file}#"},
                                                            {"delete all null lines in place (a null line has nothing)#sed -i '/^$/d' ${file}#"}}}}},
                   {"awk +", {{"print content >=column for stdin in different line (replace col with num)#awk '{ for(i=${col}; i<=NF; i++) print $i }'#"},
                              {"print content >=column for stdin in space separated same line (replace col with num)#awk '{ for(i=${col}; i<=NF; i++) printf \"%s \", $i; print \"\" }'#"}}},
                   {"tee +", {{"show manual of tee (read from stdin, output to stdout & file)#man tee#"},
                              {"accept stdout of cmd as stdin, redirect it to both cur stdout and file (used to make logs persistent)#${cmd} | tee -a ${file}#"}}},
                   {"yes +", {{"show manual#yes --help#"},
                              {"show full documentation#info coreutils yes#"},
                              {"repeatly print string to stdout (ctrl+c to stop)#yes ${string}#"},
                              {"delete all files without input yes for each possible file#yes | rm -i *.txt#"},
                              {"write duplicate lines of string into file#yes ${string} | head -n 10 > ${file}#"},
                              {"*use yes with pipe to enable auto input for interactive prompt (set +o pipefail)#yes | ${interactive_cmd}#yes"},
                              {"*use yes with pipe to enable auto input for interactive prompt (set -o pipefail)#{ yes || :; } | ${interactive_cmd}#yes"}}}}},
        {"revision +", {
            {"git vs mercurial#https://wiki.mercurial-scm.org/GitConcepts#"},
            {"git +", {{"git init +", {{"*init git repo in current dir#git init#gitinit"},
                                       {"del git repo in current dir#rm -rf .git#"}}},
                       {"git config +", {{"list all config#git config --list#"},
                                         {"list system level config#git config --list --system#"},
                                         {"*list global level config#git config --list --global#gitconfig"},
                                         {"list local repo level config#git config --list --local#"},
                                         {"list config located at file#git config --list --file ${file}#"}}},
                       {"git clone +", {{"get repo by ssh from remote (no user/passwd needed)#git clone git@github.com:${project}.git#"},
                                        {"get repo by https from remote (user/passwd needed)#git clone https://github.com/${project}.git#"}, 
                                        {"get only a specific branch from remote#git clone -b ${branch} git@github.com:${project}.git#"}}},
                       {"git diff +", {{"show diff between wkdir vs staged#git diff#"},
                                       {"show diff between wkdir vs staged with colored text#git diff --color#"},
                                       {"show diff between wkdir vs staged with colored word-by-word diff#git diff --color-words#"},
                                       {"show diff between staged vs committed#git diff --staged#"},
                                       {"show diff between any selected 2 files#git diff --no-index ${file1} ${file2}#"}}},
                       {"git show +", {{"show code changes made by latest commit#git show HEAD#"},
                                       {"show code changes made by the second latest commit#git show HEAD^#"},
                                       {"show code changes made by certain commit#git show ${commitid}#"},
                                       {"show content of a file at specified revision#git show ${commitid}:${pathtofile}#"}}},
                       {"git apply +", {{"apply the patch to workdir generated by git diff/show ${commit} > ${patch/diff}#git apply ${patch/diff}#"}}},
                       {"git format-patch +", {{"generate a patch of a range of commits#git format-patch ${startcommit}^..${endcommit} --stdout > ${xxx.patch}#"}}},
                       {"git am +", {{"creates commits by applying patches from git format-patch#git am ${xxx.patch}#"}}},
                       {"git add +", {{"add certain file's changes in wkdir to staged#git add ${file}#"},
                                      {"add changes recursively from cur wkdir to staged(ignore removal)#git add .#"},
                                      {"add changes of all wkdir to staged(hg addremove)#git add --all#"}}},
                       {"git rm +", {{"todo#git rm ${file}#"},
                                     {"todo#git rm -r $[dir}#"},
                                     {"remove file from git tracking cache without really del it#git rm --cached ${file}#"},
                                     {"remove dir from git tracking cache without really del it#git rm -r --cached ${dir}#"}}},
                       {"git status +", {{"show modified files in both working dir & staged#git status#"}}},
                       {"commit +", {{"commit changes merging into the HEAD commit, modify the commit msg#git commit --amend#"},
                                     {"commit changes merging into the HEAD commit, needless to modify commit msg#git commit --amend --no-edit#"},
                                     {"show lastest commit of certain file in project#git rev-list -n 1 HEAD ${file}#"},
                                     {"show the changed files for certain commit id#git diff-tree --no-commit-id --name-only ${commit_id} -r#"},
                                     {"show [filemod, file hash of before state, file hash of current state, operation, filename] of certain commit#git diff-tree --no-commit-id ${commit_id} -r#"}}},
                       {"time +", {{"show timestamp of latest commit of certain file in project#git rev-list -n 1 HEAD ${file} | xargs git show -s --format=%ai#"}}},
                       {"git reset +", {{"*unstage a file to wkdir#git reset ${file}#gitreset"},
                                        {"*unstage all files to wkdir#git reset#gitreset"},
                                        {"*reset workdir/index/commited to certain rev#git reset --hard ${revision}#gitreset"},
                                        {"*reset a range of committed to index (could be used for squash multiple pending commits)#git reset --soft ${revision}#gitreset"}}},
                       {"git outgoing: check between local cur branch with remote branch#git fetch && git log origin/${branchname}.. --oneline#"},
                       {"git incoming: check between local cur branch with remote branch#git fetch && git log ..origin/${branchname} --oneline#"},
                       {"git log +", {{"*show commits of a branch#git log ${branch}#gitlog"},
                                      {"*show commits of a branch in format: hash/date/message#git log --graph --pretty=\"%C(yellow) Hash: %h %C(blue)Date: %ad %C(red) Message: %s \" --date=iso ${branch}#gitlog"},
                                      {"*show commits of a branch in format: 1-line,graph,decorate#git log --oneline --graph --decorate ${branch}#gitlog"},
                                      {"*show commits in refs/ of a branch in format: 1-line,graph,decorate#git log --oneline --graph --decorate --all ${branch}#gitlog"},
                                      {"*show commits of a file in cur branch#git log --graph --oneline --decorate --follow ${file}#gitlog"},
                                      {"*compare branches: show commits of branchB not of branchA#git log ${branchA}..${branchB} --oneline#gitlog"},
                                      {"show reflog based on all commits#git log --reflog --patch#"},
                                      {"show reflog based on local recent commits#git log --reflog --no-walk --patch#"},
                                      {"*show reflog based on local recent commits#git log --reflog --oneline --no-walk#gitreset"}}},
                       {"git reflog +", {{"*show reflog based on the local changes (more fine-grained than commit)#git reflog#gitreset"}}},
                       {"git annotate +", {{"show annotations: commitid,author,date,lines#git annotate --show-stats ${file}#"},
                                           {"git annotate --show-stats -L ${startlineno},${endlineno}"}}},
                       {"git fetch#git fetch#"},
                       {"git pull = git fetch + git merge#git pull#"},
                       {"git push +", {{"push commit to remote (the same branch as local)#git push -u origin#"},
                                       {"push commit to certain branch of origin#git push -u origin ${branch}#"},
                                       {"forcibly overwrite remote with local (same branch between local/remote)#git push -f ${remotename} $(git branch | awk '{print $2}')#"},
                                       {"forcibly overwrite remote with local (different branch between local/remote)#git push -f ${remotename} ${localbranch}:${remotebranch}#"},
                                       {"delete remote branch#git push ${origin} -d ${branch}#"}}},
                       {"git branch +", {{"*list local branches#git branch --list#gitbranch"},
                                         {"*list remote branches#git branch --list -r#gitbranch"},
                                         {"*list local+remote branches#git branch --list -a#gitbranch"},
                                         {"*list local+remote branches (verbose)#git branch --list -av#gitbranch"},
                                         {"*list local+remote branches (complete)#git branch --list -avv#gitbranch"},
                                         {"fetch remote branch to local and switch to it#git fetch origin ${remote_branch} && git checkout ${remote_branch}#"},
                                         {"*rename current branch name as ${branch}#git branch -m ${branch}#gitbranch"},
                                         {"*rename (force) current branch name as ${branch}#git branch -M ${branch}#gitbranch"},
                                         {"*del local branch (origin can be omitted)#git branch -d ${origin}/${branch_to_del}#gitbranch"},
                                         {"*del remote branch#git branch -d -r ${origin}/${branch_to_del}#gitbranch"}}},
                       {"git checkout +", {{"*discard wkdir changes & update wkdir to cur branch#git checkout -f#gitcheckout"},
                                           {"*discard wkdir changes & update wkdir to certain branch#git checkout -f -b ${branch}#gitcheckout"},
                                           {"*change wkdir/index to certain branch & point HEAD at the branch#git checkout ${branch}#gitcheckout"},
                                           {"*create new branch & startup at commit#git checkout -b $(branch} ${commit}#gitcheckout"},
                                           {"*revert file1/file2 in wkdir/index to certain commit#git checkout ${commit} -- ${file1} ${file2}...#gitcheckout"}}},
                       {"git rebase +", {{"*rebase upstream changes with cur working branch#git rebase ${upstream_branch}#gitrebase"},
                                         {"*rebase upstream changes with specified branch#git rebase ${upstream_branch} ${working_branch}#gitrebase"},
                                         {"rebase upstream changes with cur working branch in interative mode#git rebase -i ${upstream_branch} ${working_branch}#"}}},
                       {"git remote +", {{"list configured remote name:url#git remote -v#"},
                                         {"list verbose remote info (urls, head branch, branches)#git remote show origin#"},
                                         {"init remote with name:url for local repo (dryrun if existed)#git remote add ${remote_name} ${remote_repo_url.git}#"},
                                         {"set remote name:url for local repo (replace if existed, fail if no remote)#git remote set-url ${remote_name} ${remote_repo_url.git}#"}}},
                       {"git describe +", {{"show most recent tag reachable for cur commit (abbrev=0 to show only tag without hash postfix)#git describe --tags --abbrev=0#"},
                                           {"show most recent tag reachable for certain commit (abbrev=0 to show only tag without hash postfix)#git describe --tags --abbrev=0 ${commitid}#"}}},
                       {"git rev-parse +", {{"show full hash value of certain commit (e.g. HEAD,HEAD~1...)#git rev-parse ${commit}#"},
                                            {"show shortened hash value of certain commit (e.g. HEAD,HEAD~1...)#git rev-parse --short ${commit}#"}}},
                       {"git ls-tree +", {{"show all traced file names non-recursively for a commit#git ls-tree --name-only ${commit}#"},
                                          {"show all traced file names recursively for a commit#git ls-tree --name-only -r ${commit}#"}}}}},
            {"mercurial +", {{"hg help +", {{"show available hg format templates#hg help templates#"},
                                            {"show help page for hg subcommand(e.g. hg help diff)#hg help ${subcommand}#"}}},
                             {"show path for remote repositories#hg path#"},
                             {"hg head +", {{"show all open head in current repo#hg head#"},
                                            {"show all descendant head from start revision#hg head -r ${rev}#"},
                                            {"show all topological head(head without child)#hg head -t#"},
                                            {"show all active head#hg head -a#"},
                                            {"show all closed head#hg head -c#"}}},
                             {"hg diff +", {{"show diff of file(wkdir) with its parent#hg diff ${file}#"},
                                            {"show diff of wkdir with certain revision#hg diff -r ${rev}#"},
                                            {"show diff of file(wkdir) with certain revision#hg diff -r ${rev} ${file}#"},
                                            {"show changes of certain revision#hg diff -c ${rev}#"},
                                            {"show changes stats of certain revision (list changed files with changed line count)#hg diff -c ${rev} --stat#"},
                                            {"show changes of certain file in certain revision#hg diff -c ${rev} ${file}#"}}},
                             {"hg annotate +", {{"show author of each line in certain file#hg annotate -u ${file}#"},
                                                {"show author of each line in certain revision#hg annotate -r ${rev} -u ${file}#"},
                                                {"show author / revision / changeset / lineno of certain revision#hg annotate -u -n -c -l ${file}#"}}},
                             {"hg commit +", {{"commit current changeset#hg commit#"},
                                              {"commit current changeset with messages#hg commit -m ${message}#"},
                                              {"commit changes of wkdir to current parent#hg commit --amend#"}}},
                             {"hg revert +", {{"tips for testing temporary changes#revert wkdir to ref changeset, do some tests, hg update -C to fallback#"}, 
                                              {"revert certain file in wkdir to state of certain revision#hg revert -r ${rev} ${file}#"},
                                              {"revert all files in wkdir to state of certain revision#hg revert -r ${rev} --all#"}}},
                             {"hg pull +", {{"pull all incoming changesets to local#hg pull#"}, 
                                            {"pull all incoming changesets till certain revision to local#hg pull -r ${rev}#"}}},
                             {"hg update +", {{"update wkdir or switch revisions#hg update#"},
                                              {"discard changes in wkdir(no backup)#hg update -C#"}}},
                             {"hg strip +", {{"restore stripped changeset using the backup file gernerated by hg#see hg unbundle ${backup} for details#"},
                                             {"remove certain revision#hg strip -r ${rev}#"}, 
                                             {"remove certain revision without backups#hg strip -r ${rev} --no-backup#"}}},
                             {"hg export+", {{"export changes of parent revision to screen#hg export#"},
                                             {"export changes of parent revision to file#hg export > ${file}#"},
                                             {"export changes of certain revision to screen#hg export -r ${rev}#"},
                                             {"export changes of certain revision to file#hg export -r ${rev} > ${file}#"}}},
                             {"hg import +", {{"import diff patch and create commit on working head#hg import ${patch}#"},
                                              {"import diff patch to wkdir without commit#hg import --no-commit ${patch}#"}}},
                             {"hg rebase +", {{"rebase revision(src) to the top of another(dst)#hg rebase -s ${rev_src} -d ${rev_dst}#"},
                                              {"rebase revision(src) to the top of another(dst) with merge tool#hg rebase -s ${rev_src} -d ${rev_dst} --tool=vimdiff#"},
                                              {"abort current rebase operation#hg rebase --abort#"}}},
                             {"hg backout +", {{"backout(del) latest revision, no merge needed#hg backout -r ${latestrev}#"},
                                               {"backout middle revision, merge needed#hg backout -r ${midrev}#"}}},
                             {"hg status +", {{"show changed files of certain revision#hg status --change ${rev}#"},
                                              {"show changed files of wkdir with certain revision#hg status --rev ${rev}#"}}},
                             {"hg log + (commit info)", {{"show recent num commits#hg log -l ${num}#"},
                                                         {"show commit msg of a revision#hg log -r ${rev}#"},
                                                         {"show commit msg of revision verbosely#hg log -r ${rev} -v#"},
                                                         {"show commits msg list of certain maintainer#hg log --user ${usr}#"},
                                                         {"show commits msg list of certain maintainer in brief mode#hg log --user ${usr} -q#"},
                                                         {"show maintainer list#hg log --template \"{author}\\n\" | sort | uniq#"},
                                                         {"show commits list of some date#hg log --date ${2022-10-20}#"},
                                                         {"show commits list of certain file#hg log ${file}#"},
                                                         {"show commits graph#hg log -G#"},
                                                         {"show brief commits with format#hg log -T \"\\t{date|shortdate}\\t[{rev}]\\t{author|user}\\t{desc}\\n\"#"},
                                                         {"show brief commits with format in graph mode#hg log -G -T \"\\t{date|shortdate}\\t[{rev}]\\t{author|user}\\t{desc}\\n\"#"},
                                                         {"show commit msg & code changes#hg log -pr ${rev}#"}}},
                             {"hg cat +", {{"show file content of certain revision#hg cat -r ${rev} ${file}#"}}},
                             {"hg tag +", {{"show help page for hg tag#hg help tag#"},
                                           {"tag a certain revision by create commit#hg tag -r ${rev} ${tagname}#"},
                                           {"remove certain tag by create a commit#hg tag --remove ${tagname}#"}}},
                             {"hg in/out +", {{"show all changeset pending to be pushed#hg outgoing(out)#"},
                                              {"show all changeset pending to be pulled#hg incoming(in)#"}}},
                             {"hg convert +", {{"*extract commit history of a subfolder from a wholesome repo#hg convert --filemap ${mapfile} ${original_proj_dir} ${new_subrepo_dir}#hgconvert"}}}}}}},
        {"network +", {{"ip +", {{"ip addr +", {{"ip addr show +", {{"show netdev info including ip address#ip addr show ${dev}#"},
                                                {"..."}}},
                                                {"ip addr add +", {{"add ip/subnetmask to dev#ip addr add ${ip/subnetmask} dev ${dev}#"}}},
                                                {"ip addr del +", {{"del ip/subnetmask from dev#ip addr del ${ip/subnetmask} dev ${dev}#"}}}}},
                                 {"ip link +", {{"ip link help#ip link help#"},
                                                {"ip link add +", {{"add veth pair#ip link add ${veth} type veth peer name ${veth_p}#"},
                                                                   {"add veth pair with netns#ip link add ${veth} netns ${netns} type veth peer ${veth_p} netns ${peer_netns}#"},
                                                                   {"add bridge#ip link add name ${bridge} type bridge#"}}},
                                                {"ip link delete +", {{"ip link delete ${bridge} type bridge#"},
                                                                      {"..."}}},
                                                {"ip link set +", {{"put veth peer to netns#ip link set ${veth_p} netns ${peer_netns}#"},
                                                                   {"remove netdev from its master#ip link set ${dev} nomaster#"},
                                                                   {"set bridge up#ip link set dev ${bridge} up#"},
                                                                   {"set bridge down#ip link set dev ${bridge} down#"},
                                                                   {"set veth up#ip link set ${veth} up#"},
                                                                   {"set veth down#ip link set ${veth} down#"},
                                                                   {"set veth on bridge#ip link set ${veth} master ${bridge}#"},
                                                                   {"set veth off bridge#ip link set ${veth} nomaster#"}}},
                                                {"ip link show +", {{"show all itfs info#ip link show#"},
                                                                    {"show basic netdev info#ip link show ${dev}#"}}},
                                                {"ip [option] link +", {{"show all itfs in color#ip -c link#"},
                                                                        {"show certain itfs info#ip -c link show ${dev}#"},
                                                                        {"show itfs statistics#ip -s link#"},
                                                                        {"show certain itfs info#ip -s link show ${dev}#"}}}}},
                                 {"ip route +", {{"ip route show +", {{"show netdev route info#ip route show dev ${dev}#"}}}}},
                                 {"ip neigh +", {{"show all ipv4 arp neighbor entries#ip neigh#"},
                                                 {"show ipv4 arp neighbor entries for dev#ip neigh show dev ${dev}#"},
                                                 {"add ip <-> mac entry for arptable of dev#ip neigh add ${ip} lladdr ${mac} dev ${dev}#"},
                                                 {"del the arp entry of ip for dev#ip neigh del ${ip} dev ${dev}"},
                                                 {"replace/add the arp entry of ip to new mac for dev#ip neigh replace ${ip} lladdr ${mac} dev ${dev}#"}}},
                                 {"ip netns +", {{"*show ip netns subcmd help#ip netns help#"},
                                                 {"*list netns#ip netns list#"},
                                                 {"*create netns by name#ip netns add ${netnsname}#"},
                                                 {"*execute cmd in a netns#ip netns exec ${netnsname} ${cmd}#ipnetns"},
                                                 {"monitor route changes of ipv4 inside certain netns#ip netns exec ${namepace} ip -4 monitor route#"}}}}},
                       {"iptables +", {{"show cmd help#iptables --help#"},
                                       {"show detailed manual#man iptables#"},
                                       {"list iptable rules +", {{"*list rules of all chains in table(raw mangle nat filter)#iptables -n -v -L -t ${table}#iptables"},
                                                                 {"*list rules of a chain in all table#iptables -nvL ${chainname}#dockeriptables"},
                                                                 {"list rules of certain chain in certain table#iptables -n -v -L ${chain} -t ${table}#iptables"}}},
                                       {"iptables-save +", {{"show manual page#man iptables-save#"},
                                                            {"show iptable rules in plain txt for certain table#iptables-save -t ${table}#"}}}}},
                       {"dns +", {{"get ip for domain name (nslookup)#nslookup ${domain_name}#"},
                                  {"get ip for domain name (dig)#dig ${domain_name}#"},
                                  {"check nameserver config file#cat /etc/resolv.conf (see: https://linux.die.net/man/5/resolv.conf)#"}}},
                       {"brctl +", {{"brctl show +", {{"show bridge general info#brctl show#"},
                                                      {"show bridge info#brctl show ${bridge}#"},
                                                      {"show bridge mac info#brctl showmacs ${bridge}#"},
                                                      {"show bridge stp info#brctl showstp ${bridge}#"}}},
                                    {"brctl addbr +", {{"add bridge#brctl addbr ${dev}#"}}},
                                    {"brctl delbr +", {{"del bridge#brctl delbr ${dev}#"}}},
                                    {"brctl addif +", {{"add itf to bridge#brctl addif ${bridge} ${interface}#"}}}}},
                       {"bridge +", {{"bridge manual ref#https://man.archlinux.org/man/bridge.8#"}}},
                       {"ethtool +", {{"ethtool: query network driver/hardware settings#https://man7.org/linux/man-pages/man8/ethtool.8.html#"},
                                      {"show network receive/transmit/drop statistics of a nic#ethtool -S ${nic}#"},
                                      {"show driver info of a nic#ethtool -i ${nic}#"},
                                      {"show ring buffer info of a nic#ethtool -g ${nic}#"},
                                      {"show EEPROM data of a nic#ethtool -e ${nic}#"},
                                      {"*show checksum offload info of a nic#ethtool --show-offload ${nic}#ethtoolchecksum"},
                                      {"shutdown checksum offload of a nic#ethtool --offload ${nic} tx off#"},
                                      {"show nic by sight in physical world: make the light of the chosen nic blinking#ethtool -g ${nic}#"}}},
                       {"netstat +", {{"show ip routing tables (ip:numerical)#netstat -rn#"},
                                      {"show active tcp/udp listening sockets (numerical)#netstat -tu -pnl#"},
                                      {"show all tcp/udp sockets (numerical)#netstat -tu -pna#"},
                                      {"show statistics of pkts of each itf#netstat -i#"}}},
                       {"nsenter +", {{"show manual for nsenter#man nsenter#"},
                                      {"enter into net namespace of pid, display listening program-sock info#sudo nsenter -t ${pid} -n netstat -pnl#"},
                                      {"enter into net namespace of pid, display all program-sock info#sudo nsenter -t ${pid} -n netstat -pna#"}}},
                       {"tcpdump +", {{"capture pkts, enable ip resolution (live)#tcpdump -i ${dev}#"},
                                      {"capture pkts, disable ip resolution (live)#tcpdump -n -i ${dev}#"},
                                      {"capture pkts, disable ip/port resolution (live & verbose)#tcpdump -n -i ${dev} -vvnnXX#"},
                                      {"capture pkts, keep max pkt size limit as 2048 bytes (live & verbose)#tcpdump -vvnnXX -s 2048 -i ${dev}#"},
                                      {"capture pkts, dump to pcap file (only keep latest 4s data)#tcpdump -vvnnXX -i ${dev} -w output.pcap -G 4#"}}},
                       {"tshark +", {{"show itfs available to tshark#tshark -D#"},
                                     {"capture the pkts from a itf#tshark -i ${interface}#"},
                                     {"capture 10 pkts from a itf#tshark -i ${interface} -c 10#"},
                                     {"capture pkts with verbose info#tshark -i ${interface} -V#"},
                                     {"capture pkts with timestamp info#tshark -i eth0 -t ad#"},
                                     {"capture pkts & disable name resolution#tshark -n -i eth0#"},
                                     {"capture pkts of certain proto from a itf (tcp/udp/icmp...)#tshark -i ${interface} ${proto}#"},
                                     {"capture 2 pkts content filtered by involving ip through eth0#tshark -i eth0 -x -c 2 -f 'host 192.168.0.20'#"},
                                     {"dump pkts from a itf to pcap file#tshark -w output.pcap -i eth0#"},
                                     {"read pkts content in pcap files#tshark -r output.pcap#"}}}}},
        {"downloader +", {{"curl +", {{""}}}}},
        {"ls series +", {{"ls +", {{"show list of file/dir in human readble format (newest modified the first)#ls -lht#"},
                                   {"show list of file/dir in human readble format (oldest modified the first)#ls -lhtr#"},
                                   {"show list of file/dir in a table format#ls | column -c ${num_item_each_row}#"},
                                   {"check whether a dir is empty or not (if-else in oneline)#[ $(ls -A ${dir} | wc -l) -eq 0 ] && echo 'empty' || echo 'not empty'#"}}},
                         {"lsof +", {{"show manual#man lsof#"},
                                     {"show network files in all addr (use portnum not portname)#sudo lsof -i -P#"}}},
                         {"lsns +", {{"show manual for format system namespace output#man lsns#"},
                                     {"list system namespaces#lsns -l#"}}}}},
        {"docker +", {{"login +", {{"*login user/pwd to dockerhub#docker login#dockerlogin"},
                                   {"*login user/pwd to specific registry#docker login ${self-hosted registry}#dockerlogin"}}},
                      {"settings +", {{"display system-wide info#docker info#"},
                                      {"*show all existed user configs for dockerd#cat /etc/docker/daemon.json#dockerd"}}},
                      {"image +", {{"show all images#docker images#"},
                                   {"pull docker image by certain digest & tag#docker image pull ${image}:${tag}@${digest}#"},
                                   {"*build img using default dockerfile in current dir#docker build -t ${image}:${tag} .#dockerbuild"},
                                   {"*build img using specified dockerkfile#docker build -f ${dockerfile_name} -t ${image}:${tag} .#dockerbuild"},
                                   {"*build img in multi-stage way#see desc/dockerfile for details#docker multistage build"},
                                   {"check detailed img info (rootfs, exposed port...)#docker image inspect ${image}#"}}},
                      {"history +", {{"show image build history(cmd/arg/env)#docker history ${image} -H#"},
                                     {"show image build history in verbose(cmd/arg/env)#docker history ${image} --no-trunc#"}}},
                      {"manifest +", {{"check whether img:tag already existed in remote, 0:existed, 1:none#docker manifest inspect ${img}:${tag} > /dev/null; echo $?#"}}},
                      {"container +", {{"show containers dead or alive (detailed)#docker ps -a#"},
                                       {"show containers dead or alive (only id)#docker ps -a -q#"},
                                       {"show containers belong to certain image#docker ps -a --filter ancestor=${image:tag}#"},
                                       {"show static info of container#docker inspect ${id_or_name}#"},
                                       {"show pid of container#docker inspect -f '{{.State.Pid}}' ${id_or_name}#"},
                                       {"show ip of container#docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${id_or_name}#"},
                                       {"show port mapping info of container#docker container port ${id or name}#"},
                                       {"show all inspectable info about a container#docker container inspect -f '{{json .}}' cranky_maxwell | jq#"},
                                       {"show resource stat info of a container#docker container stats --no-trunc ${id/name}#"},
                                       {"show the filesystem diff between container & its image (A: add, C: change)#docker container diff ${containerid}#"},
                                       {"show size/virtual of container (size: disk for each container, virtual: disk for readonly img of each container)#docker ps --size ${container}#"},
                                       {"attach to an existed running container#docker attach ${id_or_name}#"},
                                       {"remove all stopped container#docker container prune#"}}},
                      {"run +", {{"start container with env var +", {{"*set env var from cmdline#docker run -e ${key}=${value} ${image}#dockerenvvar"},
                                                                     {"*set env var from file#docker run --env-file ${file} ${image}#dockerenvvar"}}},
                                 {"start container and remove it when exit#docker run --rm ${image}#"},
                                 {"start container and login as an existed user#docker run -it --rm --user ${username} ${image} bash#"},
                                 {"*start container with perf tool PMU event collection enabled#docker run -it --security-opt seccomp=${perfenable.json} --rm ${image} bash#dockerperf"}}},
                      {"network +", {{"show docker network manager help info#docker network --help#"},
                                     {"show available network driver info#docker network ls#"},
                                     {"create a network in docker#docker network create ${networkname}#"},
                                     {"remove 1/more networks in docker#docker network rm ${networknames}#"},
                                     {"remove all unused networks in docker with prompt#docker network prune#"},
                                     {"show detailed info for a network driver by name/id#docker network inspect ${network name/id}#"}}},
                      {"port +", {{"list port mapping info of a container#docker port ${containerid}#"}}},
                      {"log +", {{"show docker daemon log in syslog (tail -f /var/log/messages or /var/log/syslog)#see docker doc: read the daemon logs#"}}},
                      {"system +", {{"show manual#docker system --help#"},
                                    {"show docker system disk consumption#docker system df#"},
                                    {"show docker system disk consumption in details#docker system df -v#"},
                                    {"show docker system level info#docker system info#"}}},
                      {"stats +", {{"show manual#docker stats --help#"},
                                   {"show CPU%, MEM-USAGE/LIMIT, MEM%, NET-I/O, BLOCK-I/O, PIDS of a container#docker stats ${container}#"},
                                   {"show CPU%, MEM-USAGE/LIMIT, MEM%, NET-I/O, BLOCK-I/O, PIDS of all container#docker stats --all#"}}},
                      {"volume +", {{"show docker container volume info formatted by jq#docker container inspect -f '{{json .Config.Volumes}}' ${container_name/id} | jq#"}}},
                      {"mount +", {{"show docker container mount info formatted by jq#docker container inspect -f '{{json .Mounts}}' ${container_name/id} | jq#"}}},
                      {"cache +", {{"remove all unused docker build cache#docker builder prune --all#"}}},
                      {"file/dirs +", {{"copy file/dir from container to host#docker cp ${container_id}:${absolute_path} ${hostdir}#"},
                                       {"copy file/dir from host to container#docker cp ${hostdir} ${container_id}:${absolute_path}#"}}}}},
        {"file & filesystem +", {{"file permissions +", {{"change owner:group +", {{"change owner:group recursively for dir/subdir#sudo chown -R ${owner}:${group} ${dir}#"}}},
                                                         {"change rwx +"}}},
                                 {"file time +", {{"set file atime/mtime as date:time#touch -d ${date:-2023-11-22} ${time:-10:27:46} ${file}#"}}},
                                 {"file type#file ${filename}#"},
                                 {"remove file startwith hypen '-'#rm ./${-filename} or rm -- ${-filename}#"},
                                 {"ln +", {{"create symbolic link files#ln -s ${abspath_to_origin_file} ${path_to_target_link}#"}}},
                                 {"zip/unzip +", {{"zip the dir to xxx.zip#zip -r ${zipfile}.zip ${dirtozip}#"},
                                                  {"unzip the xxx.zip#unzip ${zipfile}.zip#"},
                                                  {"unzip the xxx.zip to certain folder#unzip ${zipfile}.zip -d ${destdir}#"},
                                                  {"split input xxx.zip to serverl trunks<=size (xxx.zip-aa, xxx.zip-ab...)#split -b ${size} ${xxx.zip} ${xxx.zip-}#"},
                                                  {"recombinate zip trunks (xxx.zip-aa, xx.zip-ab...) back to xxx.zip#cat ${xxx.zip-*} ${xxx.zip}#"}}},
                                 {"tar/untar +", {{"untar the content of tar#tar -xvf ${xxx.tar}#"},
                                                  {"untar the content of tar.gz (gzip)#tar -xzvf ${xxx.tar.gz}#"},
                                                  {"untar the content of tar.bz2 (bzip2)#tar -xjvf ${xxx.tar.bz2#"},
                                                  {"tar files under dir using gzip (tar.gz)#tar -czvf ${xxx.tar.gz} ${dir}#"},
                                                  {"tar files under dir but excluding files under certain folder using gzip#tar --exclude='*/${foldername}/*' -zcvf ${out.tgz} ${indir}#"}}},
                                 {"dir operations +", {{"create dir under $PWD#mkdir ${dirname}#"},
                                                       {"create dir under $PWD(recursively + no err even exist)#mkdir -p main/sub/last#"},
                                                       {"create dir under /(recursively + no err even exist)#mkdir -p /main/sub/last#"}}},
                                 {"tree +", {{"show manual#man tree#"},
                                             {"show contents of certain depth in tree-format#tree -L ${num_of_layers_to_show}#"}}},
                                 {"scp +", {{"copy dir from local:dir to server:path#scp -r ${dir} ${user}@${ip}:${path}#"},
                                            {"copy file from local:file to server:path#scp ${file} ${user}@${ip}:${path}#"},
                                            {"copy dir from server:dir to local:path#scp -r ${user}@${ip}:${dir} ${path}#"},
                                            {"copy file from server:file to local:path#scp ${user}@${ip}:${file} ${localpath}#"}}},
                                 {"rsync +", {{"*sync all dir/file in source dir to target (e.g. rsync -Pcauv /repo/metung/devtools/hostfw .)#rsync -Pcauv ${source_dir} ${target_dir}#rsync"},
                                              {"*show all dir/file in source dir that need to be synced (dry-run)#rsync -Pcauvn ${source_dir} ${target_dir}#rsync"}}},
                                 {"mount +", {{"show mount info of all filesystems#mount#"}}},
                                 {"findmnt +", {{"show mount info of a specific filesystem for all source in graphic format (TARGET, SOURCE, FSTYPE, OPTIONS)#findmnt --target ${dir}#"},
                                                {"show mount info of a specific filesystem for all source in df format (TARGET, SOURCE, FSTYPE, OPTIONS)#findmnt --df --target ${dir}#"},
                                                {"show certain column raw data without headings for a given dir (include TARGET, SOURCE, FSTYPE, OPTIONS)#findmnt -n -o ${column} --target ${dir}#"}}},
                                 {"df +", {{"show [Filesystem, Size, Used, Avail, Use%, Mounted on] of a dir#df -h ${dir}#"},
                                           {"show [Filesystem, Inodes, IUsed, IFree, IUse%, Mounted on] of a dir#df -ih ${dir}#"},
                                           {"show file system type of certain dir#df -T ${dir}#"}}},
                                 {"du +", {{"list file space usage of each item under dir (largest on bottom)#du -h ${dir} | sort -h#"},
                                           {"list file space usage of each item under dir (smallest on bottom)#du -h ${dir} | sort -hr#"},
                                           {"list disk storage takeup by each user (from high to low, need su/sudo)#cd /home && du -d 1 -h | sort -hr#"},
                                           {"list top-25 disk storage takeup folders start of all depth from cur dir (from high to low, need su/sudo)#du -xkh | sort -hr | head -25#"},
                                           {"list top-25 disk storage takeup folder of all depth from cur dir (from low to high, need su/sudo)#du -xkh | sort -h | tail -25#"}}}}},
        {"hardware & devices +", {{"lsblk +", {{"show help page & available column for lsblk to output#lsblk --help#"},
                                               {"show block device info with full path displayed#lsblk -p#"},
                                               {"show block device info with chosen column to display (available column & desc see help)#lsblk -o NAME,MOUNTPOINT#"}}},
                                  {"lscpu +"},
                                  {"lspci +", {{"show pci info#lspci#"},
                                               {"show pci info in tree format#lspci -t#"},
                                               {"show pci info with detailed info of each device#lspci -v#"}}},
                                  {"lsscsi +", {{"show scsi/sata info#lsscsi#"},
                                                {"show scsi/sata info with device size as additional info#lsscsi -s#"}}},
                                  {"sata +", {{"show sata info#hdparm /dev/sda1#"}}},
                                  {"lsusb +", {{"show usb info#lsusb#"},
                                               {"show usb info (verbose)#lsusb -v#"}}},
                                  {"lshw +", {{"show hardware info in summary#lshw -short#"},
                                              {"show hardware info in html format#lshw -html > lshw.html#"}}},
                                  {"memory +", {{"show memory info by reading dmi tables#dmidecode -t memory#"}}},
                                  {"system +", {{"show system info by reading dmi tables#dmidecode -t system#"}}},
                                  {"bios +", {{"show bios info by reading dmi tables#dmidecode -t bios#"}}},
                                  {"processor +", {{"show processor info by reading dmi tables#dmidecode -t processor#"}}},
}},
        {"system activity monitoring +", {{"auditctl +", {{"list all existed audit rules#sudo auditctl -l#"},
                                                          {"add audit rules for monitoring file write, attribute changing#sudo auditctl -w /repo/reborn/logg/init-aarch64.log -p wa#"},
                                                          {"delete all audit rules#sudo auditctl -D#"},
                                                          {"delete certain audit rules##"},
                                                          {"check all audit log#sudo vim /var/log/audit/audit.log#"}}},
                                          {"inotify +"}}},
        {"search +", {{"find +", {{"show manual of find#man find#"},
                                  {"file operations +", {{"list files under certain dir#find ${dir} -type f#"},
                                                         {"list files under certain dir matches the name pattern recursively#find . -type f -name '*.cpp'#"},
                                                         {"list files under certain dir doesnt match the name pattern recursively#find ${dir} -type f ! -name '*.cpp'#"},
                                                         {"list files under certain dir matches the name pattern at given level#find ${dir} -maxdepth ${level} -type f -name '*.cpp'#"},
                                                         {"list files under certain dir but exclude ones under desc#find ${dir} -type f ! -path './desc/*'#"},
                                                         {"remove files under certain dir but exclude files under certain subdir#find ${dir} -type f ! -path './${subdir}/*' -exec rm -f {} +#"}}},
                                  {"dir operations +", {{"list dirs under cur dir#find . -type d#"},
                                                        {"list dirs under cur dir matches the name pattern recursively#find . -type d -name '*.cpp'#"},
                                                        {"list dirs under cur dir doesnt match the name pattern recursively#find . -type d ! -name '*.cpp'#"},
                                                        {"remove subdirs under certain dir but exclude level-1 subdir/files recursively match specific pattern#find ${dir} -maxdepth 1 -type d ! -path './${subdirname}' -exec rm -rf {} +#"}}},
                                  {"soft link operations +"}}},
                      {"grep +", {{"search for matched pattern in file#grep '${pattern}' ${file}#"},
                                  {"search for matched pattern under dir#grep -r '${pattern}' ${dir}#"},
                                  {"*exclude dir when search for matched pattern under dir#grep -r --exclude-dir=${dir_pattern} '${pattern}' ${dir}#grep"},
                                  {"pattern collections +", {{"search for text not matching regex in file/dir#grep -e ${pattern} ...#"},
                                                             {"search for text not matching regex (only output the matched part)#grep -oe ${pattern} ...#"},
                                                             {"search for text with regex wildcard supported#grep -E {regex_pattern}#"},
                                                             {"search for text with regex supported (only output the matched part)#grep -oE ${regex_pattern}#"}}}}}}},
        {"su/sudo/id/user/groups +", {{"su +"},
                                      {"sudo +", {{"run cmd as another user with $HOME set as /home/anotheruser before cmd run#sudo -u ${another user} -H ${cmd}#su_sudo"}}},
                                      {"user +", {{"show certain user info#id ${username}#"},
                                                  {"add a user#sudo useradd ${username}#"},
                                                  {"add passwd for a user#sudo passwd ${username}#"}}},
                                      {"print usernames currently logged in (one name per ssh connection)#users#"},
                                      {"groups +", {{"add certain user to group#sudo usermod -aG ${groupname} ${username}#"},
                                                    {"show the groups of a user#groups ${username}#"},
                                                    {"show the groups of current user#groups $(whoami)#"}}}}},
        {"vim +", {{"nvim img +", {{"edit nvim dockerfile#nvim /Users/mac/nvim/Dockerfile#"},
                                   {"build nvim image##"},
                                   {"invoke nvim image by script##"}}},
                   {"vim cmd +", {{"create & edit a new copy of current file: new.log#:sav new.log#"},
                                  {"create a new file using a range of lines#:{linestart},${lineend}w ${out.file}#"}}},
                   {"regex match +", {{"search instance match pattern (start with lib, arbitary char in middle, end with tar.gz)#:g/lib.*tar.gz#"},
                                      {"search instance match pattern in line range#/\%>9l\%<33llib.*tar.gz#"},
                                      {"search instance match pattern in line range (press no to navi)#:10,32s/lib.*tar.gz//gc#"},
                                      {"match lines does not contain the word foo#/^\(\(.*foo.*\)\@!.\)*$#"},
                                      {"match lines does not contain certain pattern#/^\(\(.*lib.*tar.gz.*\)\@!.\)*$#"},
                                      {"show lines does not contain certain pattern#:g!/lib.*tar.gz/p#"},
                                      {"show lines ccontain certain pattern#:g/lib.*tar.gz/p#"},
                                      {"delete all lines match pattern#:g/lib.*tar.gz/d#"},
                                      {"delete all lines does not match pattern#:g!/lib.*tar.gz/d#"}}}}},
        {"tmux +", {{"settings +", {{"install"},{"config"}}},
                    {"session +", {{"create new session#tmux new -s ${session}#"},
                                   {"list sessions(terminal)#tmux ls#"},
                                   {"list sessions(tmux)#ctrl+b,s#"},
                                   {"access sessions(terminal)#tmux a -t ${session}#"},
                                   {"detach from current session#ctrl+b,d#"},
                                   {"kill session(terminal/tmux)#tmux kill-session -t ${session}#"},
                                   {"rename session(terminal/tmux)#tmux rename -t ${oldname} ${newname}#"},
                                   {"rename current session(tmux)#ctrl+b,$#"}}},
                    {"window +", {{"create window#ctrl+b,c#"},
                                  {"previous window#ctrl+b,p#"},
                                  {"next window#ctrl+b,n#"},
                                  {"switch to window n#ctrl+b,${win_num}#"},
                                  {"list windows#ctrl+b w#"},
                                  {"close current window#ctrl+b,&#"}}},
                    {"pane +", {{"split win to left/right pane#ctrl+b,%#"},
                                {"split win to top/bottom pane#ctrl+b,\\#"},
                                {"select pane by arrow keys#ctrl+b,${arrows}#"},
                                {"maximize/restore current pane#ctrl+b,z#"},
                                {"close current pane#ctrl+b,x#"}}}}},
        {"crontab +", {{"show manual#man crontab#"},
                       {"show crontab configs#cat /etc/crontab#"},
                       {"list crontab jobs for current user#crontab -l#"},
                       {"edit/create crontab config for current user#crontab -e#"},
                       {"edit/create/replace crontab config for cur user in certain place#crontab ${path/file}#"},
                       {"remove all crontab jobs#crontab -r#"},
                       {"remove certain crontab job#crontab -r ${jobid}#"},
                       {"remove certain crontab job with prompt#crontab -ri#"}}},
        {"kill proc +", {{"kill +"},
                         {"pkill +", {{"kill all processes with name exactly match the pattern#pkill -f ${pattern}#"}}}}},
        {"performance +", {{"perf +", {{"list +", {{"list all supported events#perf list#"},
                                                   {"list hardware events#perf list hw#"},
                                                   {"list PMU (performance monitor unit) events#perf list pmu#"}}},
                                       {"record +", {{"record PMU event stat of certain process for a period#perf record -g -p ${pid} -- sleep ${time_to_record}#"},
                                                     {"record PMU event stat of binary executable at certain sampling rate#perf record -F 4000 -g -o perf.data ./out#"}}},
                                       {"report +", {{"report call-graph for generated perf file with statistics#perf report --stdio -ng#"}}},
                                       {"script +", {{"generate flamegreph using perf.data output#perf script | ./stackcollapse-perf.pl | ./flamegraph.pl > flame.svg#"}}}}},
                           {"top +", {{"give a snapshot for all processes of current user#top -bn1 -u $(id -u)#"}}},
                           {"memory +", {{"free +", {{"show manual#man free#"},
                                                     {"show [total, used, free, shared, buff/cache, available]#free -h#"},
                                                     {"show memory info update once in 1 second#watch -n 1 'free -h'#"}}},
                                         {"detailed meminfo#cat /proc/meminfo#"}}},
                           {"process +", {{"ps +", {{"show the full cmdline certain process#ps -ef | grep ${pid} | awk '{ for(i=${col}; i<=NF; i++) printf \"%s \", $i; print \"\" }'#"}}},
                                          {"pstree +"},
                                          {"proc +", {{"show the cmdline that start the process#cat /proc/${pid}/cmdline#"},
                                                      {"show the status of a process (todo: explanation needed)#cat /proc/${pid}/status#"}}},
                           {"cpu affinity +", {{"get certain proc's cpu affinity#taskset#"}}}}}}},
        {"debug +", {{"gdb +", {{"show manual#http://www.yolinux.com/TUTORIALS/GDB-Commands.html#"},
                                {"enable gdb in tui mode#sudo gdb -tui out#"},
                                {"polling the win#ctrl+x; o#"},
                                {"select source code win#focus src#"},
                                {"select commandline win#focus cmd#"},
                                {"select assembly win#focus asm#"},
                                {"select register win#focus reg#"},
                                {"execute exact 1 line in source code#s (step)#"},
                                {"execute 1 line in source code#n (next)#"},
                                {"refresh tui win#ctrl+l#"},
                                {"call functions to check the result#call func(para1, para2...)#"},
                                {"disassemble 100bytes of instructions after $pc#disassemble $pc,+100#"},
                                {"disassemble 100bytes of instructions after function (e.g. main)#disassemble main,+100#"},
                                {"break at function#break ${function_name}#"}}},
                     {"pdb +", {{"list 11 lines around current line#l.#"},
                                {"list the code within the range [startline, endline]#l ${startline},${endline}#"},
                                {"list the code within the range [startline, startline+count] (only if count<startline)#l ${startline},${+count}#"}}},
                     {"dlv +", {{"golang debugger doc#https://github.com/go-delve/delve/tree/master/Documentation#"},
                                {"config vim as dlv default editor by cmd edit#export DELVE_EDITOR=vim#"},
                                {"config the number of line range displayed by cmd list#config source-list-line-count 20#"},
                                {"debug golang program with option#dlv debug --check-go-version=false ${program.go} -- -option1 -option2 'fuck'#"},
                                {"list a range of src code arround program:line 20#list ${program.go}:20#"},
                                {"list certain function in certain package#list ${package}.${func}#"},
                                {"edit or show the program lines using edtior configured#edit ${program.go}:20#"}}},
                     {"strace +", {{"trace system calls as the cmd executing (follow forks & output inline)#strace -e trace=file,open,read,write -f ${cmd_to_follow}#"},
                                   {"trace system calls as the cmd executing (follow forks & output to different file)#strace -e trace=file,open,read,write -ff ${cmd_to_follow}#"}}},
                     {"valgrind +", {{"show manual#man valgrind#"},
                                     {"use memcheck tool for purpose of memory leak check#valgrind --tool=memcheck --leak-check=full ${path_to_program}#"}}}}},
        {"data serialization +", {{"json +"},
                                  {"yaml +", {{"*multiline string in yaml##yaml"}}}}},
        {"encryption +", {{"md5sum +", {{"show manual#man md5sum#"}}},
                          {"sha512sum +", {{"show manual#man sha512sum#"}}},
                          {"openssl +", {{"file/tardir encryption with aes-256-cbc (passwd promption needed)#openssl enc -aes-256-cbc -in ${unencrypted_file} -out ${encrypted_file}#"},
                                         {"file/tardir decryption with aes-256-cbc (passwd promption needed)#openssl enc -d -aes-256-cbc -in ${encrypted_file} -out ${unencrypted_file}#"}}}}},
        {"ssh +", {{"*ssh config#see desc/sshconfig for details#sshconfig"},
                   {"scp +", {{"test ssh connection to github site without create new tty#ssh -T git@github.com#"},
                              {"download file from server to local#scp user@ip:${serverdir/file} ${localdir}#"},
                              {"upload file from local to server#scp ${localdir/file} user@ip:${serverdir}#"},
                              {"download dir from server to local under local dir#scp -r user@ip:${serverdir} ${localdir}#"},
                              {"upload dir from local to server under serverdir#scp -r ${localdir} user@ip:${serverdir}#"}}}}},
        {"language +", {{"golang +", {{"show go help page#go --help#"},
                                      {"env +", {{"show go env help page#go help env#"},
                                                 {"list go env variables#go env#"},
                                                 {"show certain env variable value#go env ${env_var_name}#"},
                                                 {"change env var value (nothing change if value not valid)#go env -w ${env}=${value}#"}, 
                                                 {"usefull env configs +", {{"module are enabled regardless of whether a go.mod file is present, any directory without a go.mod file becomes its own module#go env -w GO111MODULE=on#"},
                                                                            {"modules are enabled if go.mod is present in cur/parent dir#go env -w GO111MODULE=auto#"},
                                                                            {"modules are disabled, use GOPATH for all imports#go env -w GO111MODULE=off#"}}}}},
                                      {"go mod +", {{"show help page#go help mod#"},
                                                    {"init cur dir as a module with name#go mod init ${modname}#"},
                                                    {"peeling module off cur dir#rm go.mod go.sum#"},
                                                    {"tidy modules (add missing & remove unused mods & adapt mods according to newly golang version)#go mod tidy#"},
                                                    {"show src -> dependency pairs of cur module#go mod graph#"}}},
                                      {"go get +", {{"show help page#go help get#"},
                                                    {"add package to cur module#go get ${pkgname}#"},
                                                    {"remove package downloaded#cd $GOPATH && del the related dir#"}}},
                                      {"go doc +", {{"show src code of a symbolf#go doc -src client.NewClientWithOpts#"},
                                                    {"show oneline doc of symbos in golang package#go doc -short github.com/docker/docker/api/types/container#"},
                                                    {"show full doc of golang package#go doc -all github.com/docker/docker/api/types/container#"}}},
                                      {"go build +", {{"build the program#go build ${program.go}#"},
                                                      {"show help page#go help build#"},
                                                      {"show build cmd flow without actually build the program#go build -n ${program.go}#"},
                                                      {"show build cmd flow and build the program#go build -x ${program.go}#"},
                                                      {"build the program with data racing detection annotations#go build -race ${program.g}#"}}},
                                      {"go asm +", {{"print asm using src code#go build -gcflags -S ${program.go}#"},
                                                    {"print asm purely#go tool objdump ${binary} >asm 2>&1#"},
                                                    {"print asm with golang src code#go tool objdump -S ${binary} >asm 2>&1#"}}},
                                      {"code format +", {{"show auto format tool help#gofmt --help#"},
                                                         {"format go program and output in stdout#gofmt ${path/test.go}#"},
                                                         {"format go program in place#gofmt -w ${path/test.go}#"}}}}},
                        {"python +", {{"pdb +", {{"setup pdb debugger init breakpoint#import pdb; pdb.set_trace()#"},
                                                 {"list 11 lines arround current execution line#l.#"},
                                                 {"list a range of lines 146,170#l 146,170#"},
                                                 {"list a range of lines 146,146+20#l 146,20#"},
                                                 {"list all breakpoint with its sequence number#b#"},
                                                 {"list lines appended to current shown context lines#Enter#"},
                                                 {"set break point at line num 80#break 80#"},
                                                 {"clear certain break point#clear ${breakpoint sequence number}#"},
                                                 {"continue execution (no-following func jump)#n#"},
                                                 {"continue execution (following func jump)#s#"},
                                                 {"continue execution (stop untill next breakpoint)#c#"},
                                                 {"jump back/forward to certain line & continue execution#j ${lineno}#"},
                                                 {"jump to function return clause#r#"},
                                                 {"show stacktrace (cal sequence)#w#"},
                                                 {"show function arguments#a#"}}},
                                      {"pytest +", {{"show test result of ut script#pytest test_xxx.py#"},
                                                    {"show test result with program stdout of ut test#pytest -rP test_xxxx.py#"}}}}},
                        {"shell +", {{"setup env variable for current shell#export ${var}=${val}#"},
                                     {"unset env variable for current shell#unset ${var}#"},
                                     {"setup env variable for all shell#echo \"export ${var}=${val}\" >> ~/.bashrc && source ~/.bashrc#"}}},
                        {"c +"},
                        {"cpp +"}}},
        {"ci/cd +", {{"gitlab ci/cd +", {{"*basic pipeline to register runner for project or a group##gitlabrunner"},
                                         {"*basic gitlab yaml usages & cautions##gitlabyaml"}}},
                     {"github actions +"}}},
        {"os +", {{"alpine +", {{"apk official doc site#https://wiki.alpinelinux.org/wiki/Main_Page#"},
                                {"apk info +", {{"show all installed apk#apk info#"},
                                                {"show all installed apk with 1line desc#apk -vv info#"},
                                                {"show detailed info of certain apk#apk info -a ${apk}#"}}},
                                {"apk list +#", {{"list all apk according to package indices (APKINDEX.tar.gz)#apk list#"}}},
                                {"print alpine runtime arch#apk --print-arch#"},
                                {"show graphviz code for apk dependencies#apk dot ${apk}#"},
                                {"openrc +", {{"offical git repo doc#https://github.com/OpenRC/openrc#"},
                                              {"alpine openrc apk brief doc#https://docs.alpinelinux.org/user-handbook/0.1a/Working/openrc.html#"},
                                              {"install openrc for alpine#apk add openrc#"},
                                              {"#rc-service#"}}}}},
                  {"centos +", {{"pkg +",{{"show info about a pkg (arch, version, install or not, size...)#yum info ${package_name}#"},
                                          {"show version of a pkg#rpm -q ${package_name}#"}}}}}}},
        {"tools +", {{"asciinema +", {{"record cast file startup (use ctrl+d to stop#asciinema rec ${record.cast}#"},
                                                 {"play cast file (use ctrl+c to stop)#asciinema play ${record.cast}#"},
                                                 {"generate a new faster played record using the existed record (asciinema play -h)#asciinema rec -c 'asciinema play -s 4 ${current.cast}' ${faster.cast}#"}}}}},
        {"time +", {{"show date info of current machine or NTP server configured time#date#"},
                    {"time since kernel bootup (container shared with host, vm own exclusively)#uptime#"},
                    {"show current timezone info (not NTP time)#zdump -c \"$(date +'%Y-%m-%d %H:%M:%S')\" /etc/localtime#"}}},
        {"kernel +", {{"grep config option inside zipped kernel config (if kernel is configured to have config.gz)#zcat /proc/config.gz | grep -i ${pattern_to_search}#"}}},
    };
    return menu_ptr;
}
